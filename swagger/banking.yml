openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API
    url: https://virtserver.swaggerhub.com/684006_1/BankingAPI/1.0.0
info:
  version: "1.0.0"
  title: banking-api
  description: The API for the Banking Application by Group 02, IT2A
tags:
  - name: Account
    description: "Operations related to accounts."
  - name: Deposits
    description: "Operations related to the deposits process."
  - name: Authentication
    description: "User authentication."
  - name: Guest
    description: "Operations accessible to guest users."
  - name: Employee
    description: "Operations accessible to employees."
  - name: Client
    description: "Operations accessible to bank's clients."
paths:
  /accounts:
    get:
      tags:
        - Account
        - Employee
      description: returns all accounts
      operationId: getAcounts
      security: 
        - bearerAuth: []
      parameters: 
        - in: query
          name: skip
          description: number of records to skip
          schema:
            type: integer
            format: int32
        - in: query
          name: limit
          description: max number of records to return
          schema: 
            type: integer
            format: int32
            maximum: 100
        - in: query
          name: name
          description: Filter by customer name
          schema:
            type: string
      responses:
        '200':
          description: all the accounts
          content:
            application/json:
              schema:
                type: array
                items:
                      $ref: '#/components/schemas/Account'
                example:
                  - id: 1
                    name: Bobby
                    deposits:
                      - id: 1
                        iban: "NL00INHL1234567890"
                      - id: 2
                        iban: "NL00INHL1234567891"
                  - id: 2
                    name: Bobberson
                    deposits:
                      - id: 3
                        iban: "NL00INHL1234567892"
                  - id: 3
                    name: Bobbina
                    deposits:
                      -
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags: 
      - Account
      - Guest
      - Employee
      description: register a new account
      operationId: registerAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Bobby'
              required:
                - name
      responses:
        '200':
          description: successfully registered new account
        '400':
          description: invalid request
          content: 
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /accounts/{id}:
    get:
      tags: 
      - Account
      - Employee
      - Client
      security: 
        - bearerAuth: []
      description: >
        Returns an account with following ID.<br><br>For **client**, only his user's ID will return the **200**.<br>For **employee**, it will return **200**.
      operationId: getAccount
      parameters: 
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Requested account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              example:
                id: 0
                name: 'Bobby'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
      - Account
      - Employee
      - Client
      security: 
        - bearerAuth: []
      description: >
        Updates the information of the provdied account ID.<br><br>
        **Clients** can only update their own account.<br>
        **Employees** can update anyone's account.
      operationId: updateAccount
      parameters: 
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
            example:
              id: 0
              name: 'Namey'
      responses:
        '200':
          description: Account has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              example:
                id: 1
                name: 'Namey'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:      
      - Account      
      - Employee
      security: 
        - bearerAuth: []
      description: > 
        Closes the user account IF no banking account has been tied to this account.<br>
        Otherwise, deactivates the user account.
      operationId: deleteAccount
      parameters: 
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Account successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          description: Invalid request
  /accounts/{account_id}/deposits:
    get:
      tags:
      - Deposits
      - Employee
      - Client
      security:
        - bearerAuth: []
      description: >
        Returns the list of all deposits belonging to account.<br>
        For **client**, only his own deposits are visible to him.
      operationId: getDeposits
      parameters:
        - name: account_id
          in: path
          description: Account ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A complete list of all deposits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deposit'
                example:
                  - id: 1
                    kind: current
                    iban: "NL00INHL1234567890"
                    amount: 420.69
                  - id: 2
                    kind: savings
                    iban: "NL00INHL1234567891"
                    amount: 2137.12
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
      - Deposits
      - Employee
      security: 
        - bearerAuth: []
      description: >
        Creates a new deposit for "account id" account.
      operationId: createDeposit
      parameters: 
        - name: account_id
          required: true
          in: path
          description: Account ID for which the deposit is created.
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepositCreateDTO"
      responses:
        '200':
          description: "Deposit created!"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deposit'
              example:
                id: 1
                iban: 'NL00INHL1234567890'
                kind: current
                amount: 0.00
        '401':
          $ref: '#/components/responses/Unauthorized'
  /accounts/{account_id}/deposits/{deposit_id}:
    get:
      tags:
      - Deposits
      - Employee
      - Client
      security:
        - bearerAuth: []
      description: >
        Returns details of specified deposit.<br><br>
        _Note: **Client** can only see his own account details._
      operationId: getDeposit
      parameters:
        - name: account_id
          in: path
          description: Account ID
          required: true
          schema:
            type: integer
            format: int64
        - name: deposit_id
          in: path
          description: Deposit ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Deposit details"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Account'
                example:
                  id: 1
                  kind: current
                  iban: "NL00INHL1234567890"
                  amount: 100.00
        '401':
          $ref: '#/components/responses/Unauthorized'
  /atms/{atm_id}/deposit:
    put:
      tags:
        - ATM
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Deposit money to a deposit associated with the ATM.
      operationId: depositToATM
      parameters:
        - name: atm_id
          in: path
          description: ATM ID
          required: true
          schema:
            type: integer
            format: int64
        - name: deposit_id
          in: query
          description: Deposit ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: double
                  example: 100.00
      responses:
        "200":
          description: "Deposit amount deposited!"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Deposit"
                example:
                  id: 1
                  kind: current
                  iban: "NL00INHL1234567890"
                  amount: 100.00
        "401":
          $ref: "#/components/responses/Unauthorized"
  /atms/{atm_id}/withdraw:
    put:
      tags:
        - ATM
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Withdraw money from a deposit associated with the ATM.
      operationId: withdrawFromATM
      parameters:
        - name: atm_id
          in: path
          description: ATM ID
          required: true
          schema:
            type: integer
            format: int64
        - name: deposit_id
          in: query
          description: Deposit ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: double
                  example: 50.00
      responses:
        "200":
          description: "Withdraw amount is withdrawn!"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Deposit"
                example:
                  id: 1
                  kind: current
                  iban: "NL00INHL1234567890"
                  amount: 100.00
        "401":
          $ref: "#/components/responses/Unauthorized"
  /auth/login:
    post:
      tags:
      - Authentication
      - Guest
      description: >
        Upon successful login, returns authentication token
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDTO'
            example:
              username: 'abcd123'
              password: 'TremendouslySecurePassword1!'
      responses:
        '200':
          description: > 
            User has been logged in successfully!<br><br>
            **Note:** Refresh token is valid only for the next 15 minutes. Please refer to /auth/refresh.
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/jwt'
                example:
                  access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/refresh:
    post:
      tags:
      - Authentication
      - Employee
      - Client
      description: >
        Returns a new 'auth_token" and 'refresh_token'.<br>
        **Important:** refresh_token CANNOT be expired.
      operationId: refresh
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      responses:
        '200':
          description: "A fresh access_token and refresh_token."
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/jwt'
                example:
                  access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        '401':
          $ref: '#/components/responses/Unauthorized'
components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        deposits:
          type: array
          items:
            type: object
            properties:
              id: 
                type: integer
                format: int64
              iban:
                type: string
                pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0,9]{10,10}"
      description: ok
    Deposit:
      type: object
      properties:
        id:
          type: integer
          format: int64
        kind:
          type: string
          enum: [ "current", "savings" ]
        iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        amount:
          type: number
          format: double
    DepositCreateDTO:
      type: object
      properties:
        kind:
          type: string
          enum: [ "current", "savings" ]
    ATM:
      type: object
      properties:
        id:
          type: integer
          format: int64
        iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        deposit_id:
          type: integer
          format: int64
        type:
          type: string
          enum: ["deposit", "withdrawal"]
        amount:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
    LoginDTO:
      type: object
      properties:
        username: 
          type: string
        password:
          type: string
    jwt:      
      type: object      
      properties:        
        access_token:          
          type: string          
        refresh_token:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: "Authorization information is missing or is invalid."
openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API
    url: https://virtserver.swaggerhub.com/684006_1/BankingAPI/1.0.0
info:
  version: "1.0.0"
  title: banking-api
  description: The API for the Banking Application by Group 02, IT2A
tags:
  - name: User
    description: "Operations related to users."
  - name: Accounts
    description: "Operations related to the accounts process."
  - name: Authentication
    description: "User authentication."
  - name: Guest
    description: "Operations accessible to guest users."
  - name: Employee
    description: "Operations accessible to employees."
  - name: Client
    description: "Operations accessible to bank's clients."
  - name: Transaction
    description: "Operations related to transactions."
paths:
  /users:
    get:
      tags:
        - User
        - Employee
      description: >
        Returns an array of all users. Every entry has only basic information about the user.<br>
        If user is an employee, it will return all users with IDs (see UserForEmployeeResponse).<br>
        If user is a client, it will retur UserForClientResponse.
      operationId: getAcounts
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: skip
          description: number of records to skip
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: limit
          description: max number of records to return
          required: false
          schema:
            type: integer
            format: int32
            maximum: 100
        - in: query
          name: name
          description: Filter by customer first name or last name
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of users with basic information.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/UserForEmployeeResponse"
                  - $ref: "#/components/schemas/UserForClientResponse"
                example:
                  - firstname: "Bobby"
                    lastname: "Bobberson"
                    iban: "NL00INHL1234567890"
                  - firstname: "Bobbina"
                    lastname: "Bobbersonova"
                    iban: "NL00INHL1234567891"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
    post:
      tags:
        - User
        - Guest
        - Employee
      description: >
        Registers a new user.<br><br>
        **Guests** can register themselves.<br>
        **Employees** can register new users.
      operationId: registerUser
      requestBody:
        description: User details to register
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
            example:
              email: "bobby@mail.com"
              password: "123456"
              firstname: "Bobby"
              lastname: "Bobberson"
              bsn: "123456789"
              phone_number: "0612345678"
              birth_date: "2000-01-01"
      responses:
        "201":
          description: User has been registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                id: 1
                user_type: "client"
                email: "bobby@mail.com"
                firstname: "Bobby"
                lastname: "Bobberson"
                bsn: "123456789"
                phone_number: "0612345678"
                birth_date: "2000-01-01"
                accounts: []
        "400":
          $ref: "#/components/responses/BadRequest"
  /users/{id}:
    get:
      tags:
        - User
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Returns an user with following ID.<br><br>
        For employee, or client accessign his own user, it will return User schema.<br>
        For client accessing other user, it will return UserForClientResponse schema.<br>
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Requested user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/User"
                  - $ref: "#/components/schemas/UserForClientResponse"
                example:
                  id: 1
                  user_type: "client"
                  email: "bobby@mail.com"
                  first_name: "Bobby"
                  last_name: "Bobberson"
                  bsn: "123456789"
                  phone_number: "0612345678"
                  birth_date: "2000-01-01"
                  accounts:
                    [
                      {
                        id: 1,
                        iban: "NL00INHL1234567890",
                        balance: 1000,
                        type: "savings",
                      },
                    ]
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
    put:
      tags:
        - User
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Updates the information of the provdied user ID.<br><br>
        **Clients** can only update their own user.<br>
        **Employees** can update anyone's user.<br><br>
        In both cases, it returns User schema.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User details to register
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
            example:
              email: "bobby@mail.com"
              password: "123456"
              firstname: "Bobby"
              lastname: "Bobberson"
              bsn: "123456789"
              phone_number: "0612345678"
              birth_date: "2000-01-01"
      responses:
        "200":
          description: Requested user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/User"
                example:
                  id: 1
                  user_type: "client"
                  email: "bobby@mail.com"
                  first_name: "Bobby"
                  last_name: "Bobberson"
                  bsn: "123456789"
                  phone_number: "0612345678"
                  birth_date: "2000-01-01"
                  accounts:
                    [
                      {
                        id: 1,
                        iban: "NL00INHL1234567890",
                        balance: 1000,
                        type: "savings",
                      },
                    ]
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
    delete:
      tags:
        - User
        - Employee
      security:
        - bearerAuth: []
      description: >
        Closes the user user IF no banking user has been tied to this user.<br>
        Otherwise, deactivates the user user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User successfully deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{user_id}/limits:
    get:
      tags:
        - User
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Returns all user limits.<br>
        Employee can edit any user.<br>
        Client can only edit his own limits.<br><br>
        User Users that are employee-only do NOT have limits. In this case, 400 will be returned.
      operationId: getUserLimits
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of limits
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLimits"
              example:
                daily_withdraw_limit: 1000
                daily_transfer_limit: 5000
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
    put:
      tags:
        - User
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Updates the user limits.<br>
        Employee can edit any user.<br>
        Client can only edit his own limits.<br><br>
        <b>'daily_withdraw_limit'</b> refers to the maximum amount of money that can be withdrawn from the user in a day.<br>
        <b>'daily_transfer_limit'</b> refers to the maximum amount of money that can be transferred from the user in a day.<br>
        <i>Note: daily transfer limit does not apply to transfers between users of the same user.</i>
      operationId: updateUserLimits
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLimits"
            example:
              daily_withdraw_limit: 1000
              daily_transfer_limit: 5000
      responses:
        "200":
          description: User limits have been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLimits"
              example:
                daily_withdraw_limit: 1000
                daily_transfer_limit: 5000
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /accounts:
    get:
      tags:
        - Accounts
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Returns the list of all accounts belonging to user.<br>
        For **client**, only his own accounts are visible to him.
      operationId: getAccounts
      responses:
        "200":
          description: A complete list of all accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountForClientResponse"
                example:
                  - id: 1
                    kind: current
                    iban: "NL00INHL1234567890"
                    amount: 420.69
                  - id: 2
                    kind: savings
                    iban: "NL00INHL1234567891"
                    amount: 2137.12
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - Accounts
        - Employee
      security:
        - bearerAuth: []
      description: >
        Creates a new account for "user id" user.
      operationId: createAccount
      parameters:
        - name: user_id
          required: true
          in: query
          description: User ID for which the account is created.
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountRequest"
      responses:
        "200":
          description: "Account created!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountForClientResponse"
              example:
                id: 1
                iban: "NL00INHL1234567890"
                kind: current
                amount: 0.00
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  /accounts/{account_id}:
    get:
      tags:
        - Accounts
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Returns details of specified account.<br><br>
        _Note: **Client** can only see his own user details._
      operationId: getAccount
      parameters:
        - name: account_id
          in: path
          description: Account ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Account details"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/User"
                example:
                  id: 1
                  kind: current
                  iban: "NL00INHL1234567890"
                  amount: 100.00
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /transactions:
    post:
      tags:
        - Transaction
      description: >
        Transfers money from one user to another.
      operationId: transfer
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  $ref: "#/components/schemas/TransactionRequest"
      responses:
        "201":
          description: "Transaction successful!"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/TransactionResponse"
                example:
                  id: 1
                  senderiban: "NL00INHL1234567890"
                  receiveriban: "NL00INHL0987654321"
                  amount: 50.00
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
    get:
      tags:
        - Transaction
      description: >
        Returns all transactions.
      operationId: getAllTransfers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Returns all transfers."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
  /transactions/{transaction_id}:
    get:
      tags:
        - Transaction
      description: >
        Returns all transactions for a given user.
      operationId: getTransfers
      security:
        - bearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          description: Transaction ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Returns all transfers for a given user."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /transactions/deposit:
    post:
      tags:
        - Employee
        - Client
      description: >
        Deposit money to a account.
      operationId: deposit
      parameters:
        - name: atm_id
          in: query
          description: ATM ID
          required: true
          schema:
            type: integer
            format: int64
        - name: user_id
          in: query
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: account_id
          in: query
          description: Account ID
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionDepositRequest"
            example:
              receiver_iban: "NL00INHL1234567890"
              amount: 100.00
      responses:
        "200":
          description: "Deposit successful!"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/TransactionResponse"
                example:
                  id: 1
                  sender_iban: "NL00INHL2234567890"
                  receiver_iban: "NL00INHL1234567890"
                  amount: 150.00
                  timestamp: "2021-06-01T12:00:00.000Z"
                  description: "Deposit"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
  /transactions/withdraw:
    post:
      tags:
        - Employee
        - Client
      description: >
        Withdraw money from a account.
      operationId: withdraw
      parameters:
        - name: atm_id
          in: query
          description: ATM ID
          required: true
          schema:
            type: integer
            format: int64
        - name: user_id
          in: query
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: account_id
          in: query
          description: Account ID
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionWithdrawRequest"
            example:
              sender_iban: "NL00INHL2234567890"
              amount: 100.00
              description: "Withdraw"
      responses:
        "200":
          description: "Withdraw successful!"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/TransactionResponse"
                example:
                  id: 1
                  sender_iban: "NL00INHL2234567890"
                  receiver_iban: "NL00INHL1234567890"
                  amount: 50.00
                  timestamp: "2021-06-01T12:00:00.000Z"
                  description: "Withdraw"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
  /auth/login:
    post:
      tags:
        - Authentication
        - Guest
      description: >
        Upon successful login, returns authentication token
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              username: "abcd123"
              password: "TremendouslySecurePassword1!"
      responses:
        "200":
          description: >
            User has been logged in successfully!<br><br>
            **Note:** Refresh token is valid only for the next 15 minutes. Please refer to /auth/refresh.
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/jwt"
                example:
                  access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
  /auth/refresh:
    post:
      tags:
        - Authentication
        - Employee
        - Client
      description: >
        Returns a new 'auth_token" and 'refresh_token'.<br>
        **Important:** refresh_token CANNOT be expired.
      operationId: refresh
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      responses:
        "200":
          description: "A fresh access_token and refresh_token."
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/jwt"
                example:
                  access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_type:
          type: string
          enum: [employee, client]
        email:
          type: string
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        bsn:
          type: integer
          format: int64
          pattern: "[0-9]{8,9}"
        phone_number:
          type: integer
          format: int64
          pattern: "[0-9]{10,10}"
        birth_date:
          type: string
          format: date
        accounts:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              iban:
                type: string
                pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0,9]{10,10}"
      description: ok
    UserForClientResponse:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0,9]{10,10}"
    UserForEmployeeResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
        lastname:
          type: string
        iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0,9]{10,10}"
    UserRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        bsn:
          type: integer
          format: int64
          pattern: "[0-9]{8,9}"
        phone_number:
          type: integer
          format: int64
          pattern: "[0-9]{10,10}"
        birth_date:
          type: string
          format: date
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
    AccountRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum: ["current", "saving"]
        iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        balance:
          type: number
          format: double
    AccountForClientResponse:
      type: object
      properties:
        type:
          type: string
          enum: ["current", "saving"]
        iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        balance:
          type: number
          format: double
    TransactionRequest:
      type: object
      properties:
        sender_iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        receiver_iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        amount:
          type: number
          format: double
        description:
          type: string
    TransactionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sender_iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
          nullable: true
        receiver_iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
          nullable: true
        amount:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        description:
          type: string
    TransactionDepositRequest:
      type: object
      properties:
        receiver_iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        amount:
          type: number
          format: double
    TransactionWithdrawRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sender_iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        amount:
          type: number
          format: double
        description:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    jwt:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
    UserLimits:
      type: object
      properties:
        daily_withdraw_limit:
          type: number
          format: int64
          maximum: 10000
        daily_transfer_limit:
          type: number
          format: int64
          maximum: 100000
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: "Authorization information is missing or is invalid."
    NotAllowed:
      description: "User is not allowed to perform this action."
    BadRequest:
      description: "Request body is incorrect."
    NotFound:
      description: "Element does not exist."
    Created:
      description: "Element created."
    InternalServerError:
      description: "Internal server error."

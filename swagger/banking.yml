openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API
    url: https://virtserver.swaggerhub.com/684006_1/BankingAPI/1.0.0
info:
  version: "1.0.0"
  title: banking-api
  description: The API for the Banking Application by Group 02, IT2A
tags:
  - name: User
    description: "Operations related to users."
  - name: Accounts
    description: "Operations related to the accounts process."
  - name: Authentication
    description: "User authentication."
  - name: Guest
    description: "Operations accessible to guest users."
  - name: Employee
    description: "Operations accessible to employees."
  - name: Client
    description: "Operations accessible to bank's clients."
  - name: Transaction
    description: "Operations related to transactions."
paths:
  /users:
    get:
      tags:
        - User
        - Employee
      description: >
        Returns an array of all users. Every entry has only basic information about the user.<br>
        If user is an employee, it will return all users with IDs (see UserResponse).<br>
        If user is a client, it will return UserForClientResponse.
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          description: Page number of results
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: limit
          description: Maximum number of results per page
          required: false
          schema:
            type: integer
            format: int32
            maximum: 100
        - in: query
          name: name
          description: Filter by customer first name or last name
          required: false
          schema:
            type: string
        - in: query
          name: has_no_accounts
          description: >
            Filter by users that have no accounts.<br>
            Note: This parameter is only available for employees and admins. Clients always see users that have an account.
          required: false
          schema:
            type: boolean
        - in: query
          name: active
          description: >
              Filter by users that are active or inactive.<br>
              Note: This parameter is only available for employees and admins. Clients always see active users.
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: List of users with basic information.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/UserResponse"
                  - $ref: "#/components/schemas/UserForClientResponse"
                example:
                  - id: 1
                    firstname: "Bobby"
                    lastname: "Bobberson"
                    iban: "NL00INHL1234567890"
                  - id: 2
                    firstname: "Bobbina"
                    lastname: "Bobbersonova"
                    iban: "NL00INHL1234567891"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
    post:
      tags:
        - User
        - Guest
        - Employee
      description: >
        Registers a new user.<br><br>
        **Guests** can register themselves.<br>
        **Employees** can register new users.<br><br>
        Only ADMIN can register user with a role different than CLIENT.
      operationId: registerUser
      requestBody:
        description: User details to register
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/UserRequest"
                - $ref: "#/components/schemas/UserForAdminRequest"
            example:
              email: "bobby@mail.com"
              password: "123456"
              firstname: "Bobby"
              lastname: "Bobberson"
              bsn: "123456789"
              phone_number: "0612345678"
              birth_date: "2000-01-01"
      responses:
        "201":
          description: User has been registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
              example:
                id: 1
                username: "bobby"
                email: "bobby@mail.com"
                firstname: "Bobby"
                lastname: "Bobberson"
                bsn: "123456789"
                phone_number: "0612345678"
                birth_date: "2000-01-01"
                total_balance: 0.0
                role: "client"
                current_account: null
                saving_account: null
                active: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /users/{id}:
    get:
      tags:
        - User
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Returns an user with following ID.<br><br>
        For employee, or client accessing his own user, it will return User schema.<br>
        For client accessing other user, it will return UserForClientResponse schema.<br>
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Requested user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/UserResponse"
                  - $ref: "#/components/schemas/UserForClientResponse"
                example:
                  id: 1
                  username: "bobby"
                  email: "bobby@mail.com"
                  first_name: "Bobby"
                  last_name: "Bobberson"
                  bsn: "123456789"
                  phone_number: "0612345678"
                  birth_date: "2000-01-01"
                  total_balance: 1000.0
                  role: "client"
                  current_account:
                    id: 1
                    IBAN: "NL00INHL1234567890"
                    account_type: "CURRENT"
                    currency_type: "EURO"
                    balance: 1000.0
                  saving_account: null
                  active: true
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
    put:
      tags:
        - User
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Updates the information of the provided user ID.<br><br>
        **Users** can only update their own user profile.<br>
        **Employees** can update other employees or users. They cannot update admins.<br>
        **Admin** can update any user.<br><br>
        In all cases, it returns UserResponse schema.<br><br>
        **Note:** Clients and Employees cannot update user role.<br>
        **Note:** If password is left empty, it will not be updated.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User details to register
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
            example:
              username: "bobby"
              email: "bobby@mail.com"
              password: "123456"
              firstname: "Bobby"
              lastname: "Bobberson"
              bsn: "123456789"
              phone_number: "0612345678"
              birth_date: "2000-01-01"
      responses:
        "200":
          description: Requested user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/UserResponse"
                example:
                  id: 1
                  username: "bobby"
                  email: "bobby@mail.com"
                  first_name: "Bobby"
                  last_name: "Bobberson"
                  bsn: "123456789"
                  phone_number: "0612345678"
                  birth_date: "2000-01-01"
                  total_balance: 1000.0
                  role: "client"
                  current_account:
                    id: 1
                    IBAN: "NL00INHL1234567890"
                    account_type: "CURRENT"
                    currency_type: "EURO"
                    balance: 1000.0
                  saving_account: null
                  active: true
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
    delete:
      tags:
        - User
        - Employee
      security:
        - bearerAuth: []
      description: >
        Closes the user user IF no account has been tied to the user.<br>
        Otherwise, deactivates the user.<br><br>
        **Users** can only deactivate/delete their own user.<br>
        **Employees** cannot deactivate/delete Admins.<br>
        **Admin** can deactivate/delete any user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User successfully deleted
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /users/{user_id}/limits:
    get:
      tags:
        - User
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Returns all limits for specific user.<br>
        Employee can see all User limits.<br>
        Client can only see his own limits.<br><br>
        Users that are employee-only and do not have currents accounts can't access it. In this case, 405 will be returned.
      operationId: getUserLimits
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of limits
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLimitsResponse"
              example:
                transaction_limit: 1000
                daily_transaction_limit: 5000
                remaining_daily_transaction_limit: 420.69
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "405":
          $ref: "#/components/responses/NotAllowed"
    put:
      tags:
        - User
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Updates the user limits.<br>
        Only Employee can edit User limits.<br><br>
        <b>'transaction_limit'</b> refers to maximum amount of money that can be transfered in a single transfer.<br>
        <b>'daily_transfaction_limit'</b> refers to the maximum amount of money that can be transferred from the user during a single day.<br><br>
        <i>Note: daily transfer limit does not apply to transfers between users of the same user.</i>
      operationId: updateUserLimits
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLimitsRequest"
            example:
              transaction_limit: 1000
              daily_transaction_limit: 10000
      responses:
        "200":
          description: User limits have been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLimitsResponse"
              example:
                transaction_limit: 1000
                daily_transaction_limit: 10000
                remaining_daily_transaction_limit: 5420.69
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /accounts/{user_id}:
    get:
      tags:
        - Accounts
        - Employee
        - Client
      security:
        - bearerAuth: []
      description: >
        Returns the list of all accounts belonging to user.<br>
        For **client**, only his own accounts are visible to him.
      operationId: getAccounts
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A complete list of all accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountForClientResponse"
                example:
                  - id: 1
                    iban: "NL74INHO9388899795"
                    currency_type: "EURO"
                    account_type: "CURRENT"
                    is_active: true
                    balance: 0
                    absolute_limit: 0
                    first_name: "John"
                    last_name: "Doe"
                  - id: 2
                    iban: "NL22INHO2930837932"
                    currency_type: "EURO"
                    account_type: "SAVING"
                    is_active: true
                    balance: 0
                    absolute_limit: 0
                    first_name: "John"
                    last_name: "Doe"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /accounts:
    post:
      tags:
        - Accounts
        - Employee
      security:
        - bearerAuth: []
      description: >
        Creates a new account for "user id" user.
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountRequest"
      responses:
        "200":
          description: "Account created!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountForClientResponse"
              example:
                - id: 1
                  iban: "NL74INHO9388899795"
                  currency_type: "EURO"
                  account_type: "CURRENT"
                  is_active: true
                  balance: 0
                  absolute_limit: 0
                  first_name: "John"
                  last_name: "Doe"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  /accounts/{user_id}/{account_id}:
    put:
        tags:
            - Accounts
            - Employee
        security:
            - bearerAuth: []
        description: >
            Activate the account with the given user_id and account_id.
        operationId: ActivateAccount
        parameters:
          - name: user_id
            in: path
            description: User ID
            required: true
            schema:
              type: integer
              format: int64
          - name: account_id
            in: path
            description: Account ID
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/AccountActivateRequest"
                    example:
                        is_active: false
        responses:
            "200":
                description: Account has been deactivated
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AccountForClientResponse"
                        example:
                            id: 1
                            iban: "NL74INHO9388899795"
                            currency_type: "EURO"
                            account_type: "SAVING"
                            is_active: false
                            balance: 0
                            absolute_limit: 0
                            first_name: "John"
                            last_name: "Doe"
            "401":
                $ref: "#/components/responses/Unauthorized"
            "404":
                $ref: "#/components/responses/NotFound"
            "400":
                $ref: "#/components/responses/BadRequest"
            "405":
                $ref: "#/components/responses/NotAllowed"
  /accounts/{user_id}/{account_id}/limit:
    put:
      tags:
        - Accounts
        - Employee
      security:
        - bearerAuth: []
      description: >
        Updates the account's absolute limit with the given user_id and account_id.
      operationId: UpdateAccountAbsoluteLimit
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
        - name: account_id
          in: path
          description: Account ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountAbsoluteLimitRequest"
            example:
                absolute_limit: -20
      responses:
        "200":
          description: Account has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountForClientResponse"
              example:
                id: 1
                iban: "NL74INHO9388899795"
                currency_type: "EURO"
                account_type: "SAVING"
                is_active: true
                balance: 0
                absolute_limit: 1000
                first_name: "John"
                last_name: "Doe"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  /transactions:
    post:
      tags:
        - Transaction
      description: >
        Transfers money from one user to another.
      operationId: transfer
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  $ref: "#/components/schemas/TransactionRequest"
      responses:
        "201":
          description: "Transaction successful!"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/TransactionResponse"
                example:
                  id: 1
                  senderiban: "NL00INHL1234567890"
                  receiveriban: "NL00INHL0987654321"
                  amount: 50.00
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
    get:
      tags:
        - Transaction
      description: >
        Returns all transactions.
      operationId: getAllTransfers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Returns all transfers."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
  /transactions/{transaction_id}:
    get:
      tags:
        - Transaction
      description: >
        Returns all transactions for a given user.
      operationId: getTransfers
      security:
        - bearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          description: Transaction ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Returns all transfers for a given user."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /transactions/deposit:
    post:
      tags:
        - Employee
        - Client
      description: >
        Deposit money to a account.
      operationId: deposit
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionWithdrawDepositRequest"
            example:
              IBAN: "NL55INHO6906951728"
              amount: 100.00
              currency_type: "EURO"
      responses:
        "200":
          description: "Deposit successful!"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/TransactionResponse"
                example:
                  id: 1
                  username: "JohnDoe"
                  receiver_iban: "NL55INHO6906951728"
                  amount: 100.00
                  timestamp: "2021-06-01T12:00:00.000Z"
                  description: "Successfully deposited: 100.00 EURO into your account"
                  transaction_type: "DEPOSIT"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
        "405":
          $ref: "#/components/responses/InternalServerError"
  /transactions/withdraw:
    post:
      tags:
        - Employee
        - Client
      description: >
        Withdraw money from a account.
      operationId: withdraw
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionWithdrawDepositRequest"
            example:
                IBAN: "NL55INHO6906951728"
                amount: 100.00
                currency_type: "EURO"
      responses:
        "200":
          description: "Withdraw successful!"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/TransactionResponse"
                example:
                    id: 1
                    username: "JohnDoe"
                    sender_iban: "NL55INHO6906951728"
                    amount: 100.00
                    timestamp: "2021-06-01T12:00:00.000Z"
                    description: "Successfully withdrew: 100.00 EURO from your account"
                    transaction_type: "WITHDRAWAL"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
        "405":
          $ref: "#/components/responses/InternalServerError"
  /auth/login:
    post:
      tags:
        - Authentication
        - Guest
      description: >
        Upon successful login, returns authentication token and refresh token.<br<br>
        **access_token** is valid for 6 minutes.<br>
        **refresh_token** is valid for 60 minutes. After using it, it will be invalidated.<br>
        **id** represents the user id.<br>
        **expires_at** represents the expiration date of the access token.<br>
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              username: "abcd123"
              password: "TremendouslySecurePassword1!"
      responses:
        "200":
          description: >
            User has been logged in successfully!<br><br>
            **Note:** Refresh token is valid only for the next 6 minutes. Please refer to /auth/refresh.
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/jwt"
                example:
                  access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  id: 1
                  expires_at: 1622563200
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"
  /auth/refresh:
    post:
      tags:
        - Authentication
        - Employee
        - Client
      description: >
        Returns a new 'access_token" and 'refresh_token'.<br>
        **Important:** after using the refresh_token, it will be invalidated.
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      responses:
        "200":
          description: "A fresh access_token and refresh_token."
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/jwt"
                example:
                  access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  id: 1
                  expires_at: 1622563200
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/BadRequest"

components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        bsn:
          type: string
          pattern: "[0-9]{8,9}"
        phone_number:
          type: string
          pattern: "[0-9]{10,10}"
        birth_date:
          type: string
          format: date
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
        total_balance:
          type: number
          format: double
        role:
          type: string
          format: string
          enum: [admin, employee, client]
        current_account:
          $ref: "#/components/schemas/AccountForClientResponse"
        savings_account:
          $ref: "#/components/schemas/AccountForClientResponse"
        active:
          type: boolean
      description: ok
    UserForClientResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
        lastname:
          type: string
        iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0,9]{10,10}"
    UserRequest:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        bsn:
          type: string
          pattern: "[0-9]{8,9}"
        phone_number:
          type: string
          pattern: "[0-9]{10,10}"
        birth_date:
          type: string
          format: date
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
    UserForAdminRequest:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        bsn:
          type: string
          pattern: "[0-9]{8,9}"
        phone_number:
          type: string
          pattern: "[0-9]{10,10}"
        birth_date:
          type: string
          format: date
          pattern: "[0-9]{4}-[0-9]{2}-[0-9]{2}"
        roles:
          type: array
          items:
            type: string
            enum: [admin, employee, client]
    AccountRequest:
      type: object
      properties:
        currency_type:
            type: string
            enum: [ "EURO" ]
        account_type:
            type: string
            enum: ["CURRENT", "SAVING"]
        user_id:
            type: integer
            format: int64
    AccountAbsoluteLimitRequest:
        type: object
        properties:
            absolute_limit:
              type: number
              format: double
    AccountActivateRequest:
        type: object
        properties:
            isActive:
              type: boolean
    AccountForClientResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        currency_type:
          type: string
          enum: [ "EURO" ]
        account_type:
          type: string
          enum: ["CURRENT", "SAVING"]
        isActive:
          type: boolean
        balance:
          type: number
          format: double
        absolute_limit:
          type: number
          format: double
        firstName:
          type: string
        lastName:
          type: string
    TransactionRequest:
      type: object
      properties:
        sender_iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        receiver_iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        amount:
          type: number
          format: double
        description:
          type: string
    TransactionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        sender_iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
          nullable: true
        receiver_iban:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
          nullable: true
        amount:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        transaction_type:
          type: string
          enum: [ "DEPOSIT", "WITHDRAW", "TRANSFER" ]
        description:
          type: string
    TransactionWithdrawDepositRequest:
      type: object
      properties:
        IBAN:
          type: string
          pattern: "[A-Z]{2,2}[0-9]{2,2}[A-Z]{4,4}[0-9]{10,10}"
        amount:
          type: number
          format: double
        currency_type:
          type: string
          enum: [ "EURO" ]
        description:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    jwt:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        int:
          type: integer
          format: int64
        expires_at:
          type: integer
          format: int64
    UserLimitsRequest:
      type: object
      properties:
        transaction_limit:
          type: number
          format: double
          maximum: 1000000
          minimum: 0
        daily_transaction_limit:
          type: number
          format: double
          maximum: 1000000
          minimum: 0
    UserLimitsResponse:
      type: object
      properties:
        transaction_limit:
          type: number
          format: double
          minimum: 0
        daily_transaction_limit:
          type: number
          format: double
          minimum: 0
        remaining_daily_transaction_limit:
          type: number
          format: double
          minimum: 0
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: "Authorization information is missing or is invalid."
    NotAllowed:
      description: "User is not allowed to perform this action."
    BadRequest:
      description: "Request body or URL parameter is incorrect."
    NotFound:
      description: "Element does not exist."
    Created:
      description: "Element created."
    InternalServerError:
      description: "Internal server error."
